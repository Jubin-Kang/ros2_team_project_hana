# bt_navigator:
#   ros__parameters:
#     global_frame: map
#     robot_base_frame: base_link
#     odom_topic: /odom
#     bt_loop_duration: 10
#     default_server_timeout: 20
#     wait_for_service_timeout: 1000
#     action_server_result_timeout: 900.0
#     navigators: ["navigate_to_pose", "navigate_through_poses"]
#     navigate_to_pose:
#       plugin: "nav2_bt_navigator::NavigateToPoseNavigator"
#     navigate_through_poses:
#       plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"
#     error_code_names: [compute_path_error_code, follow_path_error_code]

# controller_server:
#   ros__parameters:
#     controller_frequency: 20.0
#     costmap_update_timeout: 0.30
#     min_x_velocity_threshold: 0.001
#     min_y_velocity_threshold: 0.5
#     min_theta_velocity_threshold: 0.01  # 0.02 -> 0.01 (더 정밀한 회전)
#     failure_tolerance: 0.3
#     progress_checker_plugins: ["progress_checker"]
#     goal_checker_plugins: ["general_goal_checker"]
#     controller_plugins: ["FollowPath"]
#     use_realtime_priority: false

#     progress_checker:
#       plugin: "nav2_controller::SimpleProgressChecker"
#       required_movement_radius: 0.5
#       movement_time_allowance: 10.0

#     general_goal_checker:
#       stateful: True
#       plugin: "nav2_controller::SimpleGoalChecker"
#       xy_goal_tolerance: 0.08
#       yaw_goal_tolerance: 0.25

#     FollowPath:
#       plugin: "dwb_core::DWBLocalPlanner"
#       debug_trajectory_details: True
#       # 경로 추종 개선
#       prune_plan: true                # 지나간 경로점 제거
#       prune_distance: 0.5             # 제거 거리
#       shorten_transformed_plan: true   # 변환된 계획 단축

#       # 속도/가감속
#       min_vel_x: 0.0                # 후진 비활성화 (오실레이션 방지)
#       min_vel_y: 0.0
#       max_vel_x: 0.2                # 낮은 속도로 안정적 주행
#       max_vel_y: 0.0
#       max_vel_theta: 0.6            # 회전 속도 감소
#       min_speed_xy: 0.0
#       max_speed_xy: 0.2              # 최대 속도 제한
#       min_speed_theta: 0.0
#       acc_lim_x: 1.0                # 낮은 가속도로 부드러운 움직임
#       acc_lim_y: 0.0
#       acc_lim_theta: 2.0            # 회전 가속도 감소
#       decel_lim_x: -1.0             # 부드러운 감속
#       decel_lim_y: 0.0
#       decel_lim_theta: -2.0         # 부드러운 회전 감속

#       # 샘플/시뮬
#       vx_samples: 15                 # 적절한 샘플 수
#       vy_samples: 1                  # y축 이동 없음
#       vtheta_samples: 20              # 회전 샘플
#       sim_time: 1.2                  # 짧은 예측으로 오실레이션 감소
#       linear_granularity: 0.05
#       angular_granularity: 0.025

#       transform_tolerance: 0.2
#       xy_goal_tolerance: 0.08
#       trans_stopped_velocity: 0.05   # 0.10 -> 0.05 (더 민감한 정지 감지)
#       short_circuit_trajectory_evaluation: True   # False -> True (계산 효율화)
#       limit_vel_cmd_in_traj: False
#       stateful: True

#       critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
#       BaseObstacle.scale: 5.0         # 적절한 장애물 회피 (30->5)
#       PathAlign.scale: 32.0           # 경로 추종 강화
#       GoalAlign.scale: 24.0
#       PathAlign.forward_point_distance: 0.1   # 가까운 지점 추종
#       GoalAlign.forward_point_distance: 0.1
#       PathDist.scale: 32.0            # 경로 유지 중요
#       GoalDist.scale: 24.0
#       RotateToGoal.scale: 8.0         # 적당한 회전 제어
#       RotateToGoal.slowing_factor: 5.0
#       RotateToGoal.lookahead_time: -1.0
#       Oscillation.scale: 10.0         # 오실레이션 억제
#       Oscillation.oscillation_reset_dist: 0.05
#       Oscillation.oscillation_reset_angle: 0.2

# local_costmap:
#   local_costmap:
#     ros__parameters:
#       update_frequency: 10.0
#       publish_frequency: 10.0
#       global_frame: odom
#       robot_base_frame: base_link
#       transform_tolerance: 0.3
#       rolling_window: true
#       width: 3
#       height: 3
#       resolution: 0.05
#       footprint: '[[0.05, 0.06], [0.05, -0.06], [-0.05, -0.06], [-0.05, 0.06]]'
#       plugins: ["static_layer", "voxel_layer", "inflation_layer"]  # voxel_layer로 변경!

#       voxel_layer:
#         plugin: "nav2_costmap_2d::VoxelLayer"
#         enabled: True
#         publish_voxel_map: True
#         origin_z: 0.0
#         z_resolution: 0.05
#         z_voxels: 16
#         max_obstacle_height: 2.0
#         mark_threshold: 0
#         observation_sources: scan               # 따옴표 제거!
#         scan:
#           topic: /scan
#           sensor_frame: base_link               # 센서 프레임 명시
#           data_type: "LaserScan"
#           clearing: True
#           marking: True
#           max_obstacle_height: 2.0
#           obstacle_max_range: 2.5
#           obstacle_min_range: 0.0
#           raytrace_min_range: 0.0
#           raytrace_max_range: 3.0
#           inf_is_valid: true

#       inflation_layer:
#         plugin: "nav2_costmap_2d::InflationLayer"
#         cost_scaling_factor: 10.0      # 적절한 cost 증가
#         inflation_radius: 0.10          # 작은 맵에 맞게 0.1로 설정

#       static_layer:
#         plugin: "nav2_costmap_2d::StaticLayer"
#         map_subscribe_transient_local: True
#       always_send_full_costmap: True

# global_costmap:
#   global_costmap:
#     ros__parameters:
#       footprint_padding: 0.03
#       update_frequency: 3.0
#       publish_frequency: 3.0
#       global_frame: map
#       robot_base_frame: base_link
#       transform_tolerance: 0.3
#       footprint: '[[0.05, 0.06], [0.05, -0.06], [-0.05, -0.06], [-0.05, 0.06]]'
#       resolution: 0.05
#       track_unknown_space: true
#       plugins: ["static_layer", "obstacle_layer", "inflation_layer"]

#       obstacle_layer:
#         plugin: "nav2_costmap_2d::ObstacleLayer"
#         enabled: True
#         observation_sources: scan               # 따옴표 제거!
#         scan:
#           topic: /scan
#           sensor_frame: base_link               # 센서 프레임 명시
#           data_type: "LaserScan"
#           clearing: True
#           marking: True
#           max_obstacle_height: 2.0
#           obstacle_max_range: 2.5
#           obstacle_min_range: 0.0
#           raytrace_min_range: 0.0
#           raytrace_max_range: 3.0
#           inf_is_valid: true

#       static_layer:
#         plugin: "nav2_costmap_2d::StaticLayer"
#         map_subscribe_transient_local: True

#       inflation_layer:
#         plugin: "nav2_costmap_2d::InflationLayer"
#         cost_scaling_factor: 10.0      # 적절한 cost 증가
#         inflation_radius: 0.10          # 작은 맵에 맞게 0.1로 설정
#       always_send_full_costmap: True

# map_saver:
#   ros__parameters:
#     save_map_timeout: 5.0
#     free_thresh_default: 0.25
#     occupied_thresh_default: 0.65
#     map_subscribe_transient_local: True

# planner_server:
#   ros__parameters:
#     expected_planner_frequency: 20.0
#     planner_plugins: ["GridBased"]
#     costmap_update_timeout: 1.0
#     GridBased:
#       plugin: "nav2_navfn_planner::NavfnPlanner"
#       tolerance: 0.3                  # 0.5 -> 0.3 (더 정확한 경로)
#       use_astar: true                 # false -> true (A* 알고리즘 사용)
#       allow_unknown: true

# smoother_server:
#   ros__parameters:
#     smoother_plugins: ["simple_smoother"]
#     simple_smoother:
#       plugin: "nav2_smoother::SimpleSmoother"
#       tolerance: 1.0e-10
#       max_its: 1000
#       do_refinement: True

# behavior_server:
#   ros__parameters:
#     local_costmap_topic: local_costmap/costmap_raw
#     global_costmap_topic: global_costmap/costmap_raw
#     local_footprint_topic: local_costmap/published_footprint
#     global_footprint_topic: global_costmap/published_footprint
#     cycle_frequency: 10.0
#     behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
#     spin:
#       plugin: "nav2_behaviors::Spin"
#     backup:
#       plugin: "nav2_behaviors::BackUp"
#     drive_on_heading:
#       plugin: "nav2_behaviors::DriveOnHeading"
#     wait:
#       plugin: "nav2_behaviors::Wait"
#     assisted_teleop:
#       plugin: "nav2_behaviors::AssistedTeleop"
#     local_frame: odom
#     global_frame: map
#     robot_base_frame: base_link
#     transform_tolerance: 0.1
#     simulate_ahead_time: 2.0
#     max_rotational_vel: 1.0
#     min_rotational_vel: 0.4
#     rotational_acc_lim: 3.2

# waypoint_follower:
#   ros__parameters:
#     loop_rate: 20
#     stop_on_failure: false
#     action_server_result_timeout: 900.0
#     waypoint_task_executor_plugin: "wait_at_waypoint"
#     wait_at_waypoint:
#       plugin: "nav2_waypoint_follower::WaitAtWaypoint"
#       enabled: True
#       waypoint_pause_duration: 200

# velocity_smoother:
#   ros__parameters:
#     smoothing_frequency: 20.0
#     scale_velocities: False
#     feedback: "OPEN_LOOP"
#     max_velocity: [0.5, 0.0, 2.0]
#     min_velocity: [-0.5, 0.0, -2.0]
#     max_accel: [2.5, 0.0, 3.2]
#     max_decel: [-2.5, 0.0, -3.2]
#     odom_topic: "odom"
#     odom_duration: 0.2
#     deadband_velocity: [0.0, 0.0, 0.10]
#     velocity_timeout: 1.0

# collision_monitor:
#   ros__parameters:
#     base_frame_id: "base_footprint"
#     odom_frame_id: "odom"
#     cmd_vel_in_topic: "cmd_vel_smoothed"
#     cmd_vel_out_topic: "cmd_vel"
#     state_topic: "collision_monitor_state"
#     transform_tolerance: 0.2
#     source_timeout: 1.0
#     base_shift_correction: True
#     stop_pub_timeout: 2.0
#     polygons: ["FootprintApproach"]
#     FootprintApproach:
#       type: "polygon"
#       action_type: "approach"
#       footprint_topic: "/local_costmap/published_footprint"
#       time_before_collision: 1.2
#       simulation_time_step: 0.1
#       min_points: 6
#       visualize: False
#       enabled: True
#     observation_sources: ["scan"]
#     scan:
#       type: "scan"
#       topic: "scan"
#       min_height: 0.15
#       max_height: 2.0
#       enabled: True

# docking_server:
#   ros__parameters:
#     controller_frequency: 50.0
#     initial_perception_timeout: 5.0
#     wait_charge_timeout: 5.0
#     dock_approach_timeout: 30.0
#     undock_linear_tolerance: 0.05
#     undock_angular_tolerance: 0.1
#     max_retries: 3
#     base_frame: "base_link"
#     fixed_frame: "odom"
#     dock_backwards: false
#     dock_prestaging_tolerance: 0.5
#     dock_plugins: ['simple_charging_dock']
#     simple_charging_dock:
#       plugin: 'opennav_docking::SimpleChargingDock'
#       docking_threshold: 0.05
#       staging_x_offset: -0.7
#       use_external_detection_pose: true
#       use_battery_status: false
#       use_stall_detection: false
#       external_detection_timeout: 1.0
#       external_detection_translation_x: -0.18
#       external_detection_translation_y: 0.0
#       external_detection_rotation_roll: -1.57
#       external_detection_rotation_pitch: -1.57
#       external_detection_rotation_yaw: 0.0
#       filter_coef: 0.1
#     controller:
#       k_phi: 3.0
#       k_delta: 2.0
#       v_linear_min: 0.15
#       v_linear_max: 0.15

# loopback_simulator:
#   ros__parameters:
#     base_frame_id: "base_footprint"
#     odom_frame_id: "odom"
#     map_frame_id: "map"
#     scan_frame_id: "base_scan"
#     update_duration: 0.02

bt_navigator:
  ros__parameters:
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 20
    wait_for_service_timeout: 1000
    action_server_result_timeout: 900.0
    navigators: ["navigate_to_pose", "navigate_through_poses"]
    navigate_to_pose:
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator"
    navigate_through_poses:
      plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.

    # plugin_lib_names is used to add custom BT plugins to the executor (vector of strings).
    # Built-in plugins are added automatically
    # plugin_lib_names: []

    error_code_names:
      - compute_path_error_code
      - follow_path_error_code

controller_server:
  ros__parameters:
    controller_frequency: 20.0
    costmap_update_timeout: 0.30
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugins: ["progress_checker"]
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]
    use_realtime_priority: false

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    # Goal checker parameters
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.05
      yaw_goal_tolerance: 0.25
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 0.3
      max_vel_y: 0.0
      max_vel_theta: 1.0
      min_speed_xy: 0.0
      max_speed_xy: 0.3
      min_speed_theta: 0.0
      acc_lim_x: 2.5
      acc_lim_y: 0.0
      acc_lim_theta: 3.2
      decel_lim_x: -2.5
      decel_lim_y: 0.0
      decel_lim_theta: -3.2
      vx_samples: 20
      vy_samples: 5
      vtheta_samples: 20
      sim_time: 0.7
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.05
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      limit_vel_cmd_in_traj: False
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      GoalAlign.scale: 24.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 3.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      #robot_radius: 0.22
      footprint: '[[0.05, 0.06], [0.05, -0.06], [-0.05, -0.06], [-0.05, 0.06]]'
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.05
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      footprint_padding: 0.03
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      #robot_radius: 0.22
      footprint: '[[0.05, 0.06], [0.05, -0.06], [-0.05, -0.06], [-0.05, 0.06]]'
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.05
      always_send_full_costmap: True

# The yaml_filename does not need to be specified since it going to be set by defaults in launch.
# If you'd rather set it in the yaml, remove the default "map" value in the tb3_simulation_launch.py
# file & provide full path to map below. If CLI map configuration or launch default is provided, that will be used.
# map_server:
#   ros__parameters:
#     yaml_filename: ""

map_saver:
  ros__parameters:
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    planner_plugins: ["GridBased"]
    costmap_update_timeout: 1.0
    GridBased:
      plugin: "nav2_navfn_planner::NavfnPlanner"
      tolerance: 0.5
      use_astar: false
      allow_unknown: true

smoother_server:
  ros__parameters:
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    local_costmap_topic: local_costmap/costmap_raw
    global_costmap_topic: global_costmap/costmap_raw
    local_footprint_topic: local_costmap/published_footprint
    global_footprint_topic: global_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors::Spin"
    backup:
      plugin: "nav2_behaviors::BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors::DriveOnHeading"
    wait:
      plugin: "nav2_behaviors::Wait"
    assisted_teleop:
      plugin: "nav2_behaviors::AssistedTeleop"
    local_frame: odom
    global_frame: map
    robot_base_frame: base_link
    transform_tolerance: 0.1
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false
    action_server_result_timeout: 900.0
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.5, 0.0, 2.0]
    min_velocity: [-0.5, 0.0, -2.0]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0

collision_monitor:
  ros__parameters:
    base_frame_id: "base_footprint"
    odom_frame_id: "odom"
    cmd_vel_in_topic: "cmd_vel_smoothed"
    cmd_vel_out_topic: "cmd_vel"
    state_topic: "collision_monitor_state"
    transform_tolerance: 0.2
    source_timeout: 1.0
    base_shift_correction: True
    stop_pub_timeout: 2.0
    # Polygons represent zone around the robot for "stop", "slowdown" and "limit" action types,
    # and robot footprint for "approach" action type.
    polygons: ["FootprintApproach"]
    FootprintApproach:
      type: "polygon"
      action_type: "approach"
      footprint_topic: "/local_costmap/published_footprint"
      time_before_collision: 1.2
      simulation_time_step: 0.1
      min_points: 6
      visualize: False
      enabled: True
    observation_sources: ["scan"]
    scan:
      type: "scan"
      topic: "scan"
      min_height: 0.15
      max_height: 2.0
      enabled: True

docking_server:
  ros__parameters:
    controller_frequency: 50.0
    initial_perception_timeout: 5.0
    wait_charge_timeout: 5.0
    dock_approach_timeout: 30.0
    undock_linear_tolerance: 0.05
    undock_angular_tolerance: 0.1
    max_retries: 3
    base_frame: "base_link"
    fixed_frame: "odom"
    dock_backwards: false
    dock_prestaging_tolerance: 0.5

    # Types of docks
    dock_plugins: ['simple_charging_dock']
    simple_charging_dock:
      plugin: 'opennav_docking::SimpleChargingDock'
      docking_threshold: 0.05
      staging_x_offset: -0.7
      use_external_detection_pose: true
      use_battery_status: false # true
      use_stall_detection: false # true

      external_detection_timeout: 1.0
      external_detection_translation_x: -0.18
      external_detection_translation_y: 0.0
      external_detection_rotation_roll: -1.57
      external_detection_rotation_pitch: -1.57
      external_detection_rotation_yaw: 0.0
      filter_coef: 0.1

    # Dock instances
    # The following example illustrates configuring dock instances.
    # docks: ['home_dock']  # Input your docks here
    # home_dock:
    #   type: 'simple_charging_dock'
    #   frame: map
    #   pose: [0.0, 0.0, 0.0]

    controller:
      k_phi: 3.0
      k_delta: 2.0
      v_linear_min: 0.15
      v_linear_max: 0.15

loopback_simulator:
  ros__parameters:
    base_frame_id: "base_footprint"
    odom_frame_id: "odom"
    map_frame_id: "map"
    scan_frame_id: "base_scan"  # tb4_loopback_simulator.launch.py remaps to 'rplidar_link'
    update_duration: 0.02

amcl:
  ros__parameters:
    use_sim_time: false
    min_particles: 500
    max_particles: 2000
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2
    laser_min_range: 0.05
    laser_max_range: 3.5
    laser_max_beams: 60
    laser_z_hit: 0.95
    laser_z_short: 0.1
    laser_z_max: 0.05
    laser_z_rand: 0.05
    laser_sigma_hit: 0.2
    laser_lambda_short: 0.1
    laser_model_type: "beam"
    laser_likelihood_max_dist: 2.0
    update_min_d: 0.01
    update_min_a: 0.01
    resample_interval: 1
    transform_tolerance: 0.3
    recovery_alpha_slow: 0.0
    recovery_alpha_fast: 0.0
    tf_broadcast: true
    odom_frame_id: "odom"
    base_frame_id: "base_link"
    global_frame_id: "map"
    scan_topic: "/scan"
    set_initial_pose: true
